{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#how-to-add-a-new-page","title":"How to Add a New Page","text":"<p>We use MkDocs with auto-generated navigation. That means the folder and file structure inside <code>docs/</code> determines the sidebar tree. You don\u2019t need to edit <code>mkdocs.yml</code> manually.</p>"},{"location":"#1-create-the-markdown-file","title":"1. Create the Markdown File","text":"<ul> <li>Inside the <code>docs/</code> folder, create a new <code>.md</code> file in the right place.</li> <li>If needed, create sub-folders to reflect how you want the navigation to look.</li> </ul> <p>Example:</p> <pre><code>docs/\n  gameplay/\n    controls.md\n    combat.md\n  about.md\n</code></pre> <p>This will show up in the sidebar as:</p> <pre><code>Gameplay\n  Controls\n  Combat\nAbout\n</code></pre>"},{"location":"#2-preview-locally","title":"2. Preview Locally","text":"<ul> <li>Run the MkDocs dev server (<code>mkdocs serve</code>)</li> <li>Open http://127.0.0.1:8000 in your browser.</li> <li>Verify the page appears in the sidebar and renders correctly.</li> </ul> <p>\u26a0\ufe0f Important: MkDocs does not always render Markdown exactly like GitHub or VS Code\u2019s preview.</p> <ul> <li>Nested lists -&gt; MkDocs expects 4 spaces per indent level, while   GitHub/VS Code allow 2.</li> <li>Always confirm in the browser, not just in VS Code.</li> </ul>"},{"location":"#3-commit-your-changes","title":"3. Commit Your Changes","text":"<ul> <li>Stage and commit the new files:</li> </ul> <pre><code>git add docs/\ngit commit -m \"Add gameplay controls page\"\ngit push\n</code></pre>"},{"location":"#tips","title":"Tips","text":"<ul> <li>Use <code>#</code> for the page title. MkDocs will automatically use the first heading as   the page name.</li> <li>Keep file names in snake_case (<code>my_feature.md</code>) for consistency.</li> <li>Place images in <code>docs/assets/</code> and link with:</li> </ul> <pre><code>![Example](../assets/example.png)\n</code></pre> <p>\u2705 That\u2019s it \u2014 once pushed, the new page will appear on the site automatically.</p>"},{"location":"#adding-images-and-diagrams","title":"Adding Images and Diagrams","text":"<p>Our docs support multiple ways to include visuals, depending on complexity:</p>"},{"location":"#1-simple-diagrams-mermaid","title":"1. Simple Diagrams (Mermaid)","text":"<p>For flowcharts, sequence diagrams, or trees, use Mermaid.</p> <p>Example:</p> <pre><code>```mermaid\nflowchart LR\n  A[Start] --&gt; B{Choice?}\n  B --&gt;|Yes| C[Option 1]\n  B --&gt;|No| D[Option 2]\n```\n</code></pre> <p>This will render directly in the docs.</p> <pre><code>flowchart LR\n  A[Start] --&gt; B{Choice?}\n  B --&gt;|Yes| C[Option 1]\n  B --&gt;|No| D[Option 2]</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"#2-complex-diagrams-drawio","title":"2. Complex Diagrams (draw.io)","text":"<p>For freestyle or detailed diagrams:</p> <ol> <li>Create a <code>.drawio</code> file or save an existing one in <code>docs/drawio/</code>.</li> <li>Link it in your Markdown with the <code>mkdocs-drawio</code> plugin:</li> </ol> <pre><code>![](drawio/architecture.drawio)\n</code></pre> <ul> <li>The plugin will render it as an image in the page.</li> <li>You can always re-open the <code>.drawio</code> file in   draw.io / diagrams.net to edit.</li> </ul>"},{"location":"#3-arbitrary-images","title":"3. Arbitrary Images","text":"<p>For screenshots, concept art, or reference images:</p> <ol> <li>Place the file in <code>docs/assets/</code>.</li> <li>Link it with standard Markdown syntax:</li> </ol> <pre><code>![Example Screenshot](assets/example.png)\n</code></pre> <ul> <li>Use relative paths from the page where you add the link.</li> </ul> <p>\u2705 That\u2019s it \u2014 use the right tool for the right type of image:</p> <ul> <li>Mermaid \u2192 simple diagrams.</li> <li>Draw.io \u2192 complex, custom diagrams.</li> <li>Assets \u2192 any arbitrary image.</li> </ul>"},{"location":"design_decisions/","title":"\ud83e\udde0 Design Decisions","text":"<p>This document records high-level design and technical choices made during early development. Each section should summarize the current decision, rationale, and open questions to revisit later.</p> <p>Last updated: (fill in date)</p>"},{"location":"design_decisions/#1-core-game-identity","title":"\ud83c\udfae 1. Core Game Identity","text":"<p>Goal: Describe what the game is and what defines its core experience.</p> <ul> <li> <p>Genre &amp; Inspiration: e.g., Multiplayer roguevania inspired by Dead Cells and Hollow Knight.</p> </li> <li> <p>Core Loop Summary: e.g., Explore \u2192 Fight \u2192 Checkpoint \u2192 Upgrade \u2192 Repeat.</p> </li> <li> <p>Primary Pillars:</p> <ul> <li>[ ] Combat Feel</li> <li>[ ] Customizable Skills</li> <li>[ ] Story Integration</li> <li>[ ] Meta-Progression</li> </ul> </li> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#2-scene-game-flow-structure","title":"\ud83e\udde9 2. Scene &amp; Game Flow Structure","text":"<p>Goal: Define how scenes, levels, and transitions are managed.</p> Element Description Main Menu Hub / Safe Area Dungeon Checkpoint / Boss Room <ul> <li> <p>Data Persistence: What persists across scenes? (e.g., unlocked items, skill grid, meta progression)</p> </li> <li> <p>Scene Loading Approach: Single-scene or additive loading plan.</p> </li> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#3-data-asset-structure","title":"\ud83d\udce6 3. Data &amp; Asset Structure","text":"<p>Goal: Establish how gameplay data and assets are represented and loaded.</p> Aspect Decision Item &amp; Skill Definitions ScriptableObjects / JSON / other Enemy / NPC Definitions Scene Assets Asset Loading Strategy Unity built-in / Addressables / custom <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#4-player-control-combat","title":"\u2694\ufe0f 4. Player Control &amp; Combat","text":"<p>Goal: Decide how movement and combat systems are implemented.</p> Element Decision Controller Framework Corgi Engine Input System Unity Input System / legacy Core Combat Style Melee-focused, limited ranged Parry / Dodge / Skills Basic set planned for prototype <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#5-skill-grid-system","title":"\ud83e\udde0 5. Skill Grid System","text":"<p>Goal: Define how customizable skills are represented and executed.</p> Component Description Trigger Blocks Action Blocks Resource / Balance Mechanic Mana / Overheat / TBD <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#6-save-progression-system","title":"\ud83d\udcbe 6. Save &amp; Progression System","text":"<p>Goal: Define what data is saved and how progression works.</p> Category Description Meta Progression Unlocks, upgrades, bag expansion Run Data Inventory, skill grid, temporary stats Save Format JSON / ScriptableObject / custom Checkpoints Hub areas or safe levels between dungeons <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#7-code-architecture-communication","title":"\ud83e\uddf0 7. Code Architecture &amp; Communication","text":"<p>Goal: Outline core architectural patterns to ensure scalability and decoupling.</p> Aspect Decision Messaging / Event System Direct references / C# Events / Scriptable Signals System Management Central GameContext / Managers / Service Locator Dependency Direction Gameplay \u2192 Systems (one-way) <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#8-art-ux-direction","title":"\ud83c\udfa8 8. Art &amp; UX Direction","text":"<p>Goal: Define visual and UI goals early for consistency.</p> Aspect Decision Visual Style Pixel art / vector / hybrid Camera 2D side-scroller UI Style Minimal / stylized / immersive Input Target Controller-first / keyboard fallback <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#9-technical-workflow","title":"\ud83c\udfd7\ufe0f 9. Technical Workflow","text":"<p>Goal: Define development and collaboration conventions.</p> Area Decision Version Control Git / Repo structure / branching Package Management Manual import / Git submodules Folder Structure (to be filled) Build Targets Windows first / others later Level Authoring Edgar Unity + handcrafted room prefabs <ul> <li> <p>Rationale / Comments:   -</p> </li> <li> <p>Open Questions:   -</p> </li> </ul>"},{"location":"design_decisions/#10-known-technical-risks-research-topics","title":"\ud83d\udd2e 10. Known Technical Risks / Research Topics","text":"<p>Goal: Track areas that need investigation or pose integration risk.</p> Topic Notes / Owner / Status Corgi + FishNet integration Skill Grid performance Save / serialization format Scene stacking feasibility Edgar Unity procedural API <ul> <li>Rationale / Comments:   -</li> </ul>"},{"location":"design_decisions/#11-next-steps-action-items","title":"\u2705 11. Next Steps / Action Items","text":"Owner Task Priority Notes <p>Tip: Keep this document concise \u2014 it should evolve with the project, not become a wiki. Each section represents a decision snapshot you can revisit as the design matures.</p>"},{"location":"game_overview/","title":"\ud83c\udfae Game Overview -- [Working Title]","text":""},{"location":"game_overview/#elevator-pitch","title":"Elevator Pitch","text":"<p>A multiplayer roguevania inspired by Dead Cells and Hollow Knight. Players explore procedurally generated dungeons, fight challenging enemies and bosses with tight platformer combat, and progress through a branching world using checkpoints and meta-progression.</p>"},{"location":"game_overview/#core-gameplay-pillars","title":"Core Gameplay Pillars","text":"<ol> <li> <p>Exploration</p> <ul> <li>Dungeons are generated using Dead Cells-style room graphs (via Edgar Unity).</li> <li>Each run feels fresh, while handcrafted rooms maintain quality and variety.</li> </ul> </li> <li> <p>Combat</p> <ul> <li>Fast-paced, melee-focused combat built around attack, dodge, and parry.</li> <li>Skills and abilities come from items equipped in a skill grid system,   allowing for both active and passive customization.</li> <li>Ranged combat will be added later but won\u2019t involve free aiming (fits   controller-first design).</li> </ul> </li> <li> <p>Multiplayer</p> <ul> <li>Cooperative play: explore and fight together in the same world.</li> <li>Story progression follows the host, with options to add \u201cspoiler   alerts\u201d for guests rather than blocking content.</li> <li>Single-scene multiplayer is the baseline; multi-scene support is a stretch   goal.</li> </ul> </li> </ol>"},{"location":"game_overview/#progression","title":"Progression","text":"<ul> <li> <p>Meta-progression (between runs):</p> <ul> <li>Unlock new items and skills.</li> <li>Expand bag size for more skill combinations.</li> <li>Gain stronger starting loadouts.</li> </ul> </li> <li> <p>Checkpoints (within runs):</p> <ul> <li>After clearing a section, players reach a hub/safe area.</li> <li>From here, they can:<ul> <li>Continue to the next dungeon with their current items.</li> <li>Restart from the beginning if they\u2019re unhappy with their build.</li> </ul> </li> <li>If players fail in the next section, this is also where they restarts.</li> <li>(\u26a0\ufe0f Design note: Some feel \u201crerolling items in early levels\u201d is core to   roguelikes -- we may refine this system to preserve that fun.)</li> </ul> </li> </ul>"},{"location":"game_overview/#structure-of-a-run","title":"Structure of a Run","text":"<ol> <li>Start in a hub or checkpoint.</li> <li>Explore randomized dungeons filled with enemies, traps, and secrets.</li> <li>Gather items/skills to expand combat options.</li> <li>Defeat the boss to unlock the next section.</li> <li>Repeat until story completion or defeat.</li> </ol>"},{"location":"game_overview/#tone-setting","title":"Tone / Setting","text":"<ul> <li>Still undecided.</li> <li>Needs to support a mix of procedural environments (dungeons, biomes) and   handcrafted hub/safe areas.</li> <li>Will heavily influence enemy, item, and NPC design.</li> </ul>"},{"location":"game_overview/#key-differentiators","title":"Key Differentiators","text":"<ul> <li>Checkpoint system -&gt; Players skip trivial early content once mastered,   diving directly into new challenges.</li> <li>Multiplayer co-op \u2192 Rare in roguevania design, giving the genre a social   element.</li> <li>Bag-based skill system \u2192 Customizable triggers and effects make builds   more dynamic than traditional static upgrades.</li> </ul>"},{"location":"skill_grid/","title":"\u2694\ufe0f Skill Grid \u2013 Overview","text":""},{"location":"skill_grid/#core-idea","title":"Core Idea","text":"<p>The Skill Grid is a programmable system that lets players define their own active and passive abilities. Instead of fixed skill trees, abilities emerge from how players arrange and connect blocks within the grid. This creates flexible builds, encourages experimentation, and makes progression (larger grids, more block types) meaningful.</p>"},{"location":"skill_grid/#core-components","title":"Core Components","text":"<ol> <li> <p>Trigger Blocks</p> <ul> <li>Activate when certain conditions are met.</li> <li>Two main categories:<ul> <li>Input Triggers -&gt; bound to key/button presses (function like   traditional active skills).</li> <li>Event Triggers -&gt; tied to gameplay events (e.g. on damage taken,   on perfect parry, on kill).</li> </ul> </li> <li>Can connect to one or more Action Blocks.</li> </ul> </li> <li> <p>Action Blocks</p> <ul> <li>Execute effects when activated by a Trigger.</li> <li>Examples:<ul> <li>Heal the player.</li> <li>Damage nearby enemies.</li> <li>Summon a projectile or shield.</li> </ul> </li> <li>Serve as the \u201cpayload\u201d of the skill system.</li> </ul> </li> <li> <p>Advanced/Utility Blocks (Future Expansion)</p> <ul> <li>Add variety, creativity, and depth:<ul> <li>Relay / Chain Trigger -&gt; activates when another Trigger fires.</li> <li>Copy Block -&gt; duplicates the behavior of an adjacent block.</li> <li>Modifier Blocks -&gt; alter nearby Actions (e.g. convert damage to   fire, increase radius, add poison).</li> </ul> </li> </ul> </li> </ol>"},{"location":"skill_grid/#skill-types-supported","title":"Skill Types Supported","text":"<ul> <li>Active Skills -&gt; Player presses a button, the bound Trigger fires, linked   Actions execute.</li> <li>Reactive Skills -&gt; Gameplay events automatically trigger Actions (like   passives).</li> </ul>"},{"location":"skill_grid/#early-scope-vs-long-term","title":"Early Scope vs. Long-Term","text":"<ul> <li>Early versions will focus on the basics:<ul> <li>A small set of Input and Event Triggers.</li> <li>A few versatile Actions (heal, damage, buff).</li> </ul> </li> <li>Later expansions can introduce fun/complex blocks for creative expression.</li> </ul>"},{"location":"skill_grid/#balancing-the-skill-grid","title":"\u2696\ufe0f Balancing the Skill Grid","text":""},{"location":"skill_grid/#the-core-problem","title":"The Core Problem","text":"<ul> <li>Players can chain Triggers and Actions to create loops.</li> <li>Loops can be internal (Trigger A -&gt; B -&gt; A) or external (Trigger -&gt;   Event -&gt; other Trigger -&gt; first Trigger again).</li> <li>While we want to allow clever combos and \u201cpower moments,\u201d we must avoid   infinite spam that trivializes gameplay.</li> </ul>"},{"location":"skill_grid/#mitigation-systems","title":"Mitigation Systems","text":""},{"location":"skill_grid/#1-mana-system-resource-cost","title":"1. Mana System (Resource Cost)","text":"<ul> <li>Each Action Block consumes mana when executed.</li> <li>If insufficient mana:<ul> <li>Option A: Action sits in a queue until mana regenerates.</li> <li>Option B: Action is discarded.</li> </ul> </li> <li>Mana regenerates slowly over time.</li> <li>Benefits:<ul> <li>Familiar RPG mechanic (easy to explain).</li> <li>Prevents infinite loops by draining resources.</li> </ul> </li> <li>Risks:<ul> <li>Strong mana regen builds might still break balance unless capped.</li> </ul> </li> </ul>"},{"location":"skill_grid/#2-overheat-system-execution-cost","title":"2. Overheat System (Execution Cost)","text":"<ul> <li>Each Action Block generates heat.</li> <li>Heat builds up with rapid or repeated activations.</li> <li>If total heat exceeds threshold:<ul> <li>All queued actions are cleared.</li> <li>Triggers deactivate for a cooldown window.</li> <li>(Optional) Player takes backlash damage.</li> </ul> </li> <li>Heat dissipates gradually over time.</li> <li>Benefits:<ul> <li>Encourages pacing and rhythm in combos.</li> <li>\u201cOverheat shutdown\u201d feels thematic (fits tech or magic equally well).</li> </ul> </li> <li>Risks:<ul> <li>May frustrate players if it feels too punishing. Needs good   feedback/telegraphing.</li> </ul> </li> </ul>"},{"location":"skill_grid/#3-trigger-rate-limits-throttle","title":"3. Trigger Rate Limits (Throttle)","text":"<ul> <li>Put a per-trigger cooldown (e.g. Trigger A can only fire once every 0.5s).</li> <li>Ensures loops can\u2019t run infinitely fast.</li> <li>Benefits:<ul> <li>Simple, predictable cap.</li> </ul> </li> <li>Risks:<ul> <li>Feels restrictive \u2014 undermines the \u201cprogrammable\u201d fantasy.</li> </ul> </li> </ul>"},{"location":"skill_grid/#4-decay-diminishing-returns","title":"4. Decay / Diminishing Returns","text":"<ul> <li>Repeatedly triggering the same loop reduces effectiveness:<ul> <li>Each repeat deals less damage / heals less until it bottoms out.</li> </ul> </li> <li>Benefits:<ul> <li>Keeps combos fun for a while, then self-limiting.</li> </ul> </li> <li>Risks:<ul> <li>Harder for players to understand (\u201cwhy did my damage shrink?\u201d).</li> <li>Harder to program because actions are still getting executed.</li> </ul> </li> </ul>"},{"location":"skill_grid/#5-external-anchors-event-only-chains","title":"5. External Anchors (Event-Only Chains)","text":"<ul> <li>Restrict some triggers to external events only (damage taken, parry, kill).</li> <li>They cannot be re-triggered by other triggers.</li> <li>Benefits:<ul> <li>Loops can\u2019t self-sustain forever.</li> </ul> </li> <li>Risks:<ul> <li>Adds hidden rules players must learn.</li> <li>Does not fundamentally prevent infinite loops.</li> <li>Requires careful design of triggers.</li> </ul> </li> </ul>"},{"location":"skill_grid/#design-approach-recommendation","title":"Design Approach Recommendation","text":"<ul> <li>Hybrid system:<ul> <li>Start with Mana and/or Overheat as the main balancing axes.</li> <li>If not enough, add light rate limits on a per-trigger basis.</li> </ul> </li> <li>This gives:<ul> <li>Resource management (mana).</li> <li>Combo pacing (overheat).</li> <li>Safety net (rate limit).</li> </ul> </li> <li>Allows crazy combos, but forces players to think about when to unleash them.</li> </ul>"},{"location":"skill_grid/#minimal-example","title":"Minimal Example","text":"<p>In this example, there are 3 trigger blocks and 4 action blocks.</p> <ul> <li>When player presses the skill 1 button, the two actions above are executed   in order: First a fireball is shot, then the player gets an ATK buff.</li> <li>When player presses the skill 2 button, the five blocks in the row above are   activated from left to right, but there are only two valid action blocks   within: First a fireball is shot, then the player gets an DEF buff.</li> <li>When the player character is healed in any way, the two blocks on the right of   Trigger (On Heal) are activated: An ATK buff followed by a heal action<ul> <li>Note that the heal action would re-trigger the Trigger (On Heal),   causing a loop. This is where the balancing mechanic discussed above kicks   in.</li> </ul> </li> </ul>"}]}